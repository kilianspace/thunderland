//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/810_Input/Input System/Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Actions"",
    ""maps"": [
        {
            ""name"": ""VERTICAL_SELECTION"",
            ""id"": ""1568983e-fdac-4028-af44-81b859c89f1b"",
            ""actions"": [
                {
                    ""name"": ""UP"",
                    ""type"": ""Button"",
                    ""id"": ""8e1df472-e0a2-4f49-8aed-7fc33ddb214e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DOWN"",
                    ""type"": ""Button"",
                    ""id"": ""366b593c-55e7-4f64-a982-cd7b472d4305"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ENTER"",
                    ""type"": ""Button"",
                    ""id"": ""843651f0-bbc8-4a7c-b194-05dcff74bf7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CANCEL"",
                    ""type"": ""Button"",
                    ""id"": ""e6f8e1c4-7405-4330-842d-447e747f3d3d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5e7107d9-1990-46e6-b438-4f4f05c2a2ec"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8e1b289-f2ec-4a76-952c-5d5ff0d95384"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97870559-181b-4fdc-84d2-79de2b096602"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DOWN"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99fadbc2-e6e7-40dc-a417-a722bcedaf4d"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DOWN"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78f31b6d-ef11-4512-aa31-f382d1192652"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ENTER"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7314878-129c-4399-900f-afcea65c0d41"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ENTER"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3075dfe9-99f7-427c-a2c2-da050594afe5"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CANCEL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc1de3cf-0bcf-4db5-b7d1-07f05e58cc4a"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CANCEL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // VERTICAL_SELECTION
        m_VERTICAL_SELECTION = asset.FindActionMap("VERTICAL_SELECTION", throwIfNotFound: true);
        m_VERTICAL_SELECTION_UP = m_VERTICAL_SELECTION.FindAction("UP", throwIfNotFound: true);
        m_VERTICAL_SELECTION_DOWN = m_VERTICAL_SELECTION.FindAction("DOWN", throwIfNotFound: true);
        m_VERTICAL_SELECTION_ENTER = m_VERTICAL_SELECTION.FindAction("ENTER", throwIfNotFound: true);
        m_VERTICAL_SELECTION_CANCEL = m_VERTICAL_SELECTION.FindAction("CANCEL", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // VERTICAL_SELECTION
    private readonly InputActionMap m_VERTICAL_SELECTION;
    private IVERTICAL_SELECTIONActions m_VERTICAL_SELECTIONActionsCallbackInterface;
    private readonly InputAction m_VERTICAL_SELECTION_UP;
    private readonly InputAction m_VERTICAL_SELECTION_DOWN;
    private readonly InputAction m_VERTICAL_SELECTION_ENTER;
    private readonly InputAction m_VERTICAL_SELECTION_CANCEL;
    public struct VERTICAL_SELECTIONActions
    {
        private @PlayerInput m_Wrapper;
        public VERTICAL_SELECTIONActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @UP => m_Wrapper.m_VERTICAL_SELECTION_UP;
        public InputAction @DOWN => m_Wrapper.m_VERTICAL_SELECTION_DOWN;
        public InputAction @ENTER => m_Wrapper.m_VERTICAL_SELECTION_ENTER;
        public InputAction @CANCEL => m_Wrapper.m_VERTICAL_SELECTION_CANCEL;
        public InputActionMap Get() { return m_Wrapper.m_VERTICAL_SELECTION; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VERTICAL_SELECTIONActions set) { return set.Get(); }
        public void SetCallbacks(IVERTICAL_SELECTIONActions instance)
        {
            if (m_Wrapper.m_VERTICAL_SELECTIONActionsCallbackInterface != null)
            {
                @UP.started -= m_Wrapper.m_VERTICAL_SELECTIONActionsCallbackInterface.OnUP;
                @UP.performed -= m_Wrapper.m_VERTICAL_SELECTIONActionsCallbackInterface.OnUP;
                @UP.canceled -= m_Wrapper.m_VERTICAL_SELECTIONActionsCallbackInterface.OnUP;
                @DOWN.started -= m_Wrapper.m_VERTICAL_SELECTIONActionsCallbackInterface.OnDOWN;
                @DOWN.performed -= m_Wrapper.m_VERTICAL_SELECTIONActionsCallbackInterface.OnDOWN;
                @DOWN.canceled -= m_Wrapper.m_VERTICAL_SELECTIONActionsCallbackInterface.OnDOWN;
                @ENTER.started -= m_Wrapper.m_VERTICAL_SELECTIONActionsCallbackInterface.OnENTER;
                @ENTER.performed -= m_Wrapper.m_VERTICAL_SELECTIONActionsCallbackInterface.OnENTER;
                @ENTER.canceled -= m_Wrapper.m_VERTICAL_SELECTIONActionsCallbackInterface.OnENTER;
                @CANCEL.started -= m_Wrapper.m_VERTICAL_SELECTIONActionsCallbackInterface.OnCANCEL;
                @CANCEL.performed -= m_Wrapper.m_VERTICAL_SELECTIONActionsCallbackInterface.OnCANCEL;
                @CANCEL.canceled -= m_Wrapper.m_VERTICAL_SELECTIONActionsCallbackInterface.OnCANCEL;
            }
            m_Wrapper.m_VERTICAL_SELECTIONActionsCallbackInterface = instance;
            if (instance != null)
            {
                @UP.started += instance.OnUP;
                @UP.performed += instance.OnUP;
                @UP.canceled += instance.OnUP;
                @DOWN.started += instance.OnDOWN;
                @DOWN.performed += instance.OnDOWN;
                @DOWN.canceled += instance.OnDOWN;
                @ENTER.started += instance.OnENTER;
                @ENTER.performed += instance.OnENTER;
                @ENTER.canceled += instance.OnENTER;
                @CANCEL.started += instance.OnCANCEL;
                @CANCEL.performed += instance.OnCANCEL;
                @CANCEL.canceled += instance.OnCANCEL;
            }
        }
    }
    public VERTICAL_SELECTIONActions @VERTICAL_SELECTION => new VERTICAL_SELECTIONActions(this);
    public interface IVERTICAL_SELECTIONActions
    {
        void OnUP(InputAction.CallbackContext context);
        void OnDOWN(InputAction.CallbackContext context);
        void OnENTER(InputAction.CallbackContext context);
        void OnCANCEL(InputAction.CallbackContext context);
    }
}
