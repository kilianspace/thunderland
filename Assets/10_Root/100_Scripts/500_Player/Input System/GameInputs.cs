//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/10_Root/100_Scripts/500_Player/Input System/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""FIELD_MOVE"",
            ""id"": ""beb28169-ee0b-42d3-bff2-28a67f98214a"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""eb25c0c4-2ec5-4280-8830-62266bba2d66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""7404049b-2105-4455-b794-d028ef9b5aef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""f5956f50-2620-41cf-b113-a464f910cfb8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""c477092c-ad5a-47df-ba3d-f552ffdb9a9f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Circle"",
                    ""type"": ""Button"",
                    ""id"": ""799649b3-39e4-4e43-b076-bd2b1359d190"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Triangle"",
                    ""type"": ""Button"",
                    ""id"": ""ec943277-d545-4a4d-91ab-b383130889d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cross"",
                    ""type"": ""Button"",
                    ""id"": ""78c0fdcd-f840-4c7d-9904-f3a023449b21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6bc1d163-4797-4e75-91c9-6969015b67e7"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1de1f7f1-780c-49c7-bca0-d4ba7df9e649"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8dc4635d-edf8-4ff8-9c19-40ed13e694e0"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3890b4b7-9c76-461d-9256-327e4b16ad9e"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1266f50-3946-458f-ab39-038a1162b01c"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Circle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11086188-5294-40e2-adb7-af6599a3ac0e"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Triangle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df8729bf-20b5-44c1-a2b8-98cbaea82748"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cross"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SELECT"",
            ""id"": ""5591876c-fc11-4e04-9a44-677e9c4ae011"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""f28816f4-a255-474b-9487-bac613ea3d1c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""e4291a5e-3833-40ba-90e3-f47e08d5eec7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""f4e0cbe7-b77f-4b3a-9183-86f2cada4a6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""a231579a-996a-4f92-8016-ed52071bbf98"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Circle"",
                    ""type"": ""Button"",
                    ""id"": ""80268394-ab57-4120-b70a-308d925c305c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Triangle"",
                    ""type"": ""Button"",
                    ""id"": ""edb97251-c180-498d-a36a-a8638be85836"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cross"",
                    ""type"": ""Button"",
                    ""id"": ""4cfe13ec-1150-4141-a707-08bcd5950d4a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0b439705-2a55-4d33-84ec-fb1c4377164c"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3d098bf-3975-4e55-a265-d64404720ed7"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6dc36548-7f06-48be-bc34-901d20ecc040"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""227a52ba-db4f-458e-87fa-96076de8641e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1706e1c-a912-471a-aee7-2fd88f64214f"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Circle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1302d7f-dfbd-4a0a-8ab5-1638831ac959"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Triangle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53af5ad3-edd4-4e25-9d46-f63d4bc0a958"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cross"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FIELD_MOVE
        m_FIELD_MOVE = asset.FindActionMap("FIELD_MOVE", throwIfNotFound: true);
        m_FIELD_MOVE_Up = m_FIELD_MOVE.FindAction("Up", throwIfNotFound: true);
        m_FIELD_MOVE_Down = m_FIELD_MOVE.FindAction("Down", throwIfNotFound: true);
        m_FIELD_MOVE_Left = m_FIELD_MOVE.FindAction("Left", throwIfNotFound: true);
        m_FIELD_MOVE_Right = m_FIELD_MOVE.FindAction("Right", throwIfNotFound: true);
        m_FIELD_MOVE_Circle = m_FIELD_MOVE.FindAction("Circle", throwIfNotFound: true);
        m_FIELD_MOVE_Triangle = m_FIELD_MOVE.FindAction("Triangle", throwIfNotFound: true);
        m_FIELD_MOVE_Cross = m_FIELD_MOVE.FindAction("Cross", throwIfNotFound: true);
        // SELECT
        m_SELECT = asset.FindActionMap("SELECT", throwIfNotFound: true);
        m_SELECT_Up = m_SELECT.FindAction("Up", throwIfNotFound: true);
        m_SELECT_Down = m_SELECT.FindAction("Down", throwIfNotFound: true);
        m_SELECT_Left = m_SELECT.FindAction("Left", throwIfNotFound: true);
        m_SELECT_Right = m_SELECT.FindAction("Right", throwIfNotFound: true);
        m_SELECT_Circle = m_SELECT.FindAction("Circle", throwIfNotFound: true);
        m_SELECT_Triangle = m_SELECT.FindAction("Triangle", throwIfNotFound: true);
        m_SELECT_Cross = m_SELECT.FindAction("Cross", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FIELD_MOVE
    private readonly InputActionMap m_FIELD_MOVE;
    private IFIELD_MOVEActions m_FIELD_MOVEActionsCallbackInterface;
    private readonly InputAction m_FIELD_MOVE_Up;
    private readonly InputAction m_FIELD_MOVE_Down;
    private readonly InputAction m_FIELD_MOVE_Left;
    private readonly InputAction m_FIELD_MOVE_Right;
    private readonly InputAction m_FIELD_MOVE_Circle;
    private readonly InputAction m_FIELD_MOVE_Triangle;
    private readonly InputAction m_FIELD_MOVE_Cross;
    public struct FIELD_MOVEActions
    {
        private @GameInputs m_Wrapper;
        public FIELD_MOVEActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_FIELD_MOVE_Up;
        public InputAction @Down => m_Wrapper.m_FIELD_MOVE_Down;
        public InputAction @Left => m_Wrapper.m_FIELD_MOVE_Left;
        public InputAction @Right => m_Wrapper.m_FIELD_MOVE_Right;
        public InputAction @Circle => m_Wrapper.m_FIELD_MOVE_Circle;
        public InputAction @Triangle => m_Wrapper.m_FIELD_MOVE_Triangle;
        public InputAction @Cross => m_Wrapper.m_FIELD_MOVE_Cross;
        public InputActionMap Get() { return m_Wrapper.m_FIELD_MOVE; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FIELD_MOVEActions set) { return set.Get(); }
        public void SetCallbacks(IFIELD_MOVEActions instance)
        {
            if (m_Wrapper.m_FIELD_MOVEActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_FIELD_MOVEActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_FIELD_MOVEActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_FIELD_MOVEActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_FIELD_MOVEActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_FIELD_MOVEActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_FIELD_MOVEActionsCallbackInterface.OnDown;
                @Left.started -= m_Wrapper.m_FIELD_MOVEActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_FIELD_MOVEActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_FIELD_MOVEActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_FIELD_MOVEActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_FIELD_MOVEActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_FIELD_MOVEActionsCallbackInterface.OnRight;
                @Circle.started -= m_Wrapper.m_FIELD_MOVEActionsCallbackInterface.OnCircle;
                @Circle.performed -= m_Wrapper.m_FIELD_MOVEActionsCallbackInterface.OnCircle;
                @Circle.canceled -= m_Wrapper.m_FIELD_MOVEActionsCallbackInterface.OnCircle;
                @Triangle.started -= m_Wrapper.m_FIELD_MOVEActionsCallbackInterface.OnTriangle;
                @Triangle.performed -= m_Wrapper.m_FIELD_MOVEActionsCallbackInterface.OnTriangle;
                @Triangle.canceled -= m_Wrapper.m_FIELD_MOVEActionsCallbackInterface.OnTriangle;
                @Cross.started -= m_Wrapper.m_FIELD_MOVEActionsCallbackInterface.OnCross;
                @Cross.performed -= m_Wrapper.m_FIELD_MOVEActionsCallbackInterface.OnCross;
                @Cross.canceled -= m_Wrapper.m_FIELD_MOVEActionsCallbackInterface.OnCross;
            }
            m_Wrapper.m_FIELD_MOVEActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Circle.started += instance.OnCircle;
                @Circle.performed += instance.OnCircle;
                @Circle.canceled += instance.OnCircle;
                @Triangle.started += instance.OnTriangle;
                @Triangle.performed += instance.OnTriangle;
                @Triangle.canceled += instance.OnTriangle;
                @Cross.started += instance.OnCross;
                @Cross.performed += instance.OnCross;
                @Cross.canceled += instance.OnCross;
            }
        }
    }
    public FIELD_MOVEActions @FIELD_MOVE => new FIELD_MOVEActions(this);

    // SELECT
    private readonly InputActionMap m_SELECT;
    private ISELECTActions m_SELECTActionsCallbackInterface;
    private readonly InputAction m_SELECT_Up;
    private readonly InputAction m_SELECT_Down;
    private readonly InputAction m_SELECT_Left;
    private readonly InputAction m_SELECT_Right;
    private readonly InputAction m_SELECT_Circle;
    private readonly InputAction m_SELECT_Triangle;
    private readonly InputAction m_SELECT_Cross;
    public struct SELECTActions
    {
        private @GameInputs m_Wrapper;
        public SELECTActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_SELECT_Up;
        public InputAction @Down => m_Wrapper.m_SELECT_Down;
        public InputAction @Left => m_Wrapper.m_SELECT_Left;
        public InputAction @Right => m_Wrapper.m_SELECT_Right;
        public InputAction @Circle => m_Wrapper.m_SELECT_Circle;
        public InputAction @Triangle => m_Wrapper.m_SELECT_Triangle;
        public InputAction @Cross => m_Wrapper.m_SELECT_Cross;
        public InputActionMap Get() { return m_Wrapper.m_SELECT; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SELECTActions set) { return set.Get(); }
        public void SetCallbacks(ISELECTActions instance)
        {
            if (m_Wrapper.m_SELECTActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_SELECTActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_SELECTActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_SELECTActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_SELECTActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_SELECTActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_SELECTActionsCallbackInterface.OnDown;
                @Left.started -= m_Wrapper.m_SELECTActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_SELECTActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_SELECTActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_SELECTActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_SELECTActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_SELECTActionsCallbackInterface.OnRight;
                @Circle.started -= m_Wrapper.m_SELECTActionsCallbackInterface.OnCircle;
                @Circle.performed -= m_Wrapper.m_SELECTActionsCallbackInterface.OnCircle;
                @Circle.canceled -= m_Wrapper.m_SELECTActionsCallbackInterface.OnCircle;
                @Triangle.started -= m_Wrapper.m_SELECTActionsCallbackInterface.OnTriangle;
                @Triangle.performed -= m_Wrapper.m_SELECTActionsCallbackInterface.OnTriangle;
                @Triangle.canceled -= m_Wrapper.m_SELECTActionsCallbackInterface.OnTriangle;
                @Cross.started -= m_Wrapper.m_SELECTActionsCallbackInterface.OnCross;
                @Cross.performed -= m_Wrapper.m_SELECTActionsCallbackInterface.OnCross;
                @Cross.canceled -= m_Wrapper.m_SELECTActionsCallbackInterface.OnCross;
            }
            m_Wrapper.m_SELECTActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Circle.started += instance.OnCircle;
                @Circle.performed += instance.OnCircle;
                @Circle.canceled += instance.OnCircle;
                @Triangle.started += instance.OnTriangle;
                @Triangle.performed += instance.OnTriangle;
                @Triangle.canceled += instance.OnTriangle;
                @Cross.started += instance.OnCross;
                @Cross.performed += instance.OnCross;
                @Cross.canceled += instance.OnCross;
            }
        }
    }
    public SELECTActions @SELECT => new SELECTActions(this);
    public interface IFIELD_MOVEActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnCircle(InputAction.CallbackContext context);
        void OnTriangle(InputAction.CallbackContext context);
        void OnCross(InputAction.CallbackContext context);
    }
    public interface ISELECTActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnCircle(InputAction.CallbackContext context);
        void OnTriangle(InputAction.CallbackContext context);
        void OnCross(InputAction.CallbackContext context);
    }
}
