//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Root/Player/Input System/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [
        {
            ""name"": ""Select"",
            ""id"": ""40957c5f-7392-4969-a436-37cb978bf4ed"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""b53ee6b5-9172-4679-8bc1-b872140b855d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""ea85eb47-2686-46d2-83e5-ae107a06a626"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""75f094c2-60f7-4120-bb7c-9a84ef1551b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""6985f342-89ab-4a93-b85c-34a69cd4718b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Circle"",
                    ""type"": ""Button"",
                    ""id"": ""eef200a6-7140-472c-8535-87321aa4ac12"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cross"",
                    ""type"": ""Button"",
                    ""id"": ""ecbee01e-28a5-46a5-a18d-d7921a2eb012"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fd186164-2175-46c5-8970-3bbf1366ce53"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9344859-aa72-4fa2-8c38-252dac9c0a9a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c5183e9-f440-4ad3-828e-7e1344178ca4"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6ca5081-efa7-49cd-98cd-76391b977697"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d85cf76-e400-4c9b-8296-2fc21f589a66"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Circle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""750472d6-e973-4e92-abb2-b0ed6652e561"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Circle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0e8e338-6889-4c49-9b68-d672434c3646"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Circle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0767c5e-5ce7-4a25-9418-f05599fa7906"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cross"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8739c6ac-f01d-42b3-a622-58863639413b"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4482990b-e618-4442-8c0b-391220227a53"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e8ab199-200f-4449-8258-7ac96daa0f6e"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d7bee41-1cfd-4eed-a35a-3198892abc55"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80f6157d-c04b-4372-80a4-bd22c2ed6840"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cross"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FieldMove"",
            ""id"": ""b2496bc4-00ee-4464-b758-8446ebf6a26d"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""29aab0b8-9ebf-440a-8d74-429e8f7b65ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""c3e9b083-fc3b-420d-92f6-3c9738d8328d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""b23745e2-ea9a-495c-a681-78a449ac82d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""4f699e13-7d1f-4d9b-8671-eb4e1aa1eaad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Joystick_L"",
                    ""type"": ""Value"",
                    ""id"": ""9b8c4dfc-57d6-408b-83a7-7b0e54fd8bc7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Circle"",
                    ""type"": ""Button"",
                    ""id"": ""ae941b6c-afa0-471a-9f6f-667a3ad5efa3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Triangle"",
                    ""type"": ""Button"",
                    ""id"": ""6d52586b-432f-4918-b0fb-6bb1f591ae85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2a2e8cce-9f38-4442-9093-c992daf0c4eb"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85d782d5-4f13-4c0d-b157-d347d3fd2337"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93bb4615-5dd1-4601-9db8-e3cedf261bbc"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1d75051-577e-4b5b-b057-857466f7e989"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3265d008-a1b4-48f7-9403-a22553b8b8b0"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f512593-9791-496b-a540-5faaa467522b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8a66bf5-a1f8-4570-aef2-557bd99af8d3"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d14eac7e-227f-4b1e-aa55-a4ce884ccb13"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5cee618-24fb-4177-8922-278ca286fe4a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick_L"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af437372-d6fb-4ac0-ba10-32bb1cedd788"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Circle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8d8885a-ca28-4d6e-ab13-7bd9837abd89"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Circle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd404b63-bb92-4972-b042-2ce19a9cbe92"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Triangle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ec368c8-d1c6-4f70-8683-ffa5a124258d"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Triangle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Select
        m_Select = asset.FindActionMap("Select", throwIfNotFound: true);
        m_Select_Up = m_Select.FindAction("Up", throwIfNotFound: true);
        m_Select_Down = m_Select.FindAction("Down", throwIfNotFound: true);
        m_Select_Left = m_Select.FindAction("Left", throwIfNotFound: true);
        m_Select_Right = m_Select.FindAction("Right", throwIfNotFound: true);
        m_Select_Circle = m_Select.FindAction("Circle", throwIfNotFound: true);
        m_Select_Cross = m_Select.FindAction("Cross", throwIfNotFound: true);
        // FieldMove
        m_FieldMove = asset.FindActionMap("FieldMove", throwIfNotFound: true);
        m_FieldMove_Up = m_FieldMove.FindAction("Up", throwIfNotFound: true);
        m_FieldMove_Down = m_FieldMove.FindAction("Down", throwIfNotFound: true);
        m_FieldMove_Left = m_FieldMove.FindAction("Left", throwIfNotFound: true);
        m_FieldMove_Right = m_FieldMove.FindAction("Right", throwIfNotFound: true);
        m_FieldMove_Joystick_L = m_FieldMove.FindAction("Joystick_L", throwIfNotFound: true);
        m_FieldMove_Circle = m_FieldMove.FindAction("Circle", throwIfNotFound: true);
        m_FieldMove_Triangle = m_FieldMove.FindAction("Triangle", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Select
    private readonly InputActionMap m_Select;
    private ISelectActions m_SelectActionsCallbackInterface;
    private readonly InputAction m_Select_Up;
    private readonly InputAction m_Select_Down;
    private readonly InputAction m_Select_Left;
    private readonly InputAction m_Select_Right;
    private readonly InputAction m_Select_Circle;
    private readonly InputAction m_Select_Cross;
    public struct SelectActions
    {
        private @GameInputs m_Wrapper;
        public SelectActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_Select_Up;
        public InputAction @Down => m_Wrapper.m_Select_Down;
        public InputAction @Left => m_Wrapper.m_Select_Left;
        public InputAction @Right => m_Wrapper.m_Select_Right;
        public InputAction @Circle => m_Wrapper.m_Select_Circle;
        public InputAction @Cross => m_Wrapper.m_Select_Cross;
        public InputActionMap Get() { return m_Wrapper.m_Select; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SelectActions set) { return set.Get(); }
        public void SetCallbacks(ISelectActions instance)
        {
            if (m_Wrapper.m_SelectActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_SelectActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_SelectActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_SelectActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_SelectActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_SelectActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_SelectActionsCallbackInterface.OnDown;
                @Left.started -= m_Wrapper.m_SelectActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_SelectActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_SelectActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_SelectActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_SelectActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_SelectActionsCallbackInterface.OnRight;
                @Circle.started -= m_Wrapper.m_SelectActionsCallbackInterface.OnCircle;
                @Circle.performed -= m_Wrapper.m_SelectActionsCallbackInterface.OnCircle;
                @Circle.canceled -= m_Wrapper.m_SelectActionsCallbackInterface.OnCircle;
                @Cross.started -= m_Wrapper.m_SelectActionsCallbackInterface.OnCross;
                @Cross.performed -= m_Wrapper.m_SelectActionsCallbackInterface.OnCross;
                @Cross.canceled -= m_Wrapper.m_SelectActionsCallbackInterface.OnCross;
            }
            m_Wrapper.m_SelectActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Circle.started += instance.OnCircle;
                @Circle.performed += instance.OnCircle;
                @Circle.canceled += instance.OnCircle;
                @Cross.started += instance.OnCross;
                @Cross.performed += instance.OnCross;
                @Cross.canceled += instance.OnCross;
            }
        }
    }
    public SelectActions @Select => new SelectActions(this);

    // FieldMove
    private readonly InputActionMap m_FieldMove;
    private IFieldMoveActions m_FieldMoveActionsCallbackInterface;
    private readonly InputAction m_FieldMove_Up;
    private readonly InputAction m_FieldMove_Down;
    private readonly InputAction m_FieldMove_Left;
    private readonly InputAction m_FieldMove_Right;
    private readonly InputAction m_FieldMove_Joystick_L;
    private readonly InputAction m_FieldMove_Circle;
    private readonly InputAction m_FieldMove_Triangle;
    public struct FieldMoveActions
    {
        private @GameInputs m_Wrapper;
        public FieldMoveActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_FieldMove_Up;
        public InputAction @Down => m_Wrapper.m_FieldMove_Down;
        public InputAction @Left => m_Wrapper.m_FieldMove_Left;
        public InputAction @Right => m_Wrapper.m_FieldMove_Right;
        public InputAction @Joystick_L => m_Wrapper.m_FieldMove_Joystick_L;
        public InputAction @Circle => m_Wrapper.m_FieldMove_Circle;
        public InputAction @Triangle => m_Wrapper.m_FieldMove_Triangle;
        public InputActionMap Get() { return m_Wrapper.m_FieldMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FieldMoveActions set) { return set.Get(); }
        public void SetCallbacks(IFieldMoveActions instance)
        {
            if (m_Wrapper.m_FieldMoveActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_FieldMoveActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_FieldMoveActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_FieldMoveActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_FieldMoveActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_FieldMoveActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_FieldMoveActionsCallbackInterface.OnDown;
                @Left.started -= m_Wrapper.m_FieldMoveActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_FieldMoveActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_FieldMoveActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_FieldMoveActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_FieldMoveActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_FieldMoveActionsCallbackInterface.OnRight;
                @Joystick_L.started -= m_Wrapper.m_FieldMoveActionsCallbackInterface.OnJoystick_L;
                @Joystick_L.performed -= m_Wrapper.m_FieldMoveActionsCallbackInterface.OnJoystick_L;
                @Joystick_L.canceled -= m_Wrapper.m_FieldMoveActionsCallbackInterface.OnJoystick_L;
                @Circle.started -= m_Wrapper.m_FieldMoveActionsCallbackInterface.OnCircle;
                @Circle.performed -= m_Wrapper.m_FieldMoveActionsCallbackInterface.OnCircle;
                @Circle.canceled -= m_Wrapper.m_FieldMoveActionsCallbackInterface.OnCircle;
                @Triangle.started -= m_Wrapper.m_FieldMoveActionsCallbackInterface.OnTriangle;
                @Triangle.performed -= m_Wrapper.m_FieldMoveActionsCallbackInterface.OnTriangle;
                @Triangle.canceled -= m_Wrapper.m_FieldMoveActionsCallbackInterface.OnTriangle;
            }
            m_Wrapper.m_FieldMoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Joystick_L.started += instance.OnJoystick_L;
                @Joystick_L.performed += instance.OnJoystick_L;
                @Joystick_L.canceled += instance.OnJoystick_L;
                @Circle.started += instance.OnCircle;
                @Circle.performed += instance.OnCircle;
                @Circle.canceled += instance.OnCircle;
                @Triangle.started += instance.OnTriangle;
                @Triangle.performed += instance.OnTriangle;
                @Triangle.canceled += instance.OnTriangle;
            }
        }
    }
    public FieldMoveActions @FieldMove => new FieldMoveActions(this);
    public interface ISelectActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnCircle(InputAction.CallbackContext context);
        void OnCross(InputAction.CallbackContext context);
    }
    public interface IFieldMoveActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnJoystick_L(InputAction.CallbackContext context);
        void OnCircle(InputAction.CallbackContext context);
        void OnTriangle(InputAction.CallbackContext context);
    }
}
